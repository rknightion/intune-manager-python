name: CI Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Only allow one workflow run per branch at a time
# New commits cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x64
          - os: linux
            arch: x64
            runner: ubuntu-latest
            artifact_name: IntuneManager.bin
            output_path: IntuneManager

          # Linux ARM64
          - os: linux
            arch: arm64
            runner: ubuntu-24.04-arm
            artifact_name: IntuneManager.bin
            output_path: IntuneManager

          # Windows x64
          - os: windows
            arch: x64
            runner: windows-latest
            artifact_name: IntuneManager.exe
            output_path: IntuneManager.exe

          # Windows ARM64
          - os: windows
            arch: arm64
            runner: windows-11-arm
            artifact_name: IntuneManager.exe
            output_path: IntuneManager.exe

          # macOS Intel
          - os: macos
            arch: x64
            runner: macos-13
            artifact_name: IntuneManager
            output_path: intune_manager.app

          # macOS ARM64
          - os: macos
            arch: arm64
            runner: macos-latest
            artifact_name: IntuneManager
            output_path: intune_manager.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          version: "latest"
          enable-cache: true

      # Setup compiler caching (ccache for Linux/macOS, clcache for Windows)
      - name: Setup ccache (Linux/macOS)
        if: runner.os != 'Windows'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-${{ matrix.arch }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-
            ${{ matrix.os }}-
          max-size: 2G
          verbose: 2
          create-symlink: true  # Create compiler wrapper symlinks so gcc/clang use ccache

      - name: Configure ccache (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "NUITKA_CCACHE_BINARY=$(which ccache)" >> $GITHUB_ENV
          echo "::group::ccache configuration"
          ccache --version
          ccache --show-config
          ccache --zero-stats
          ccache --max-size=2G
          echo "::endgroup::"
          echo "::group::Compiler symlinks verification"
          which gcc || true
          which g++ || true
          which clang || true
          which clang++ || true
          ls -la "$(which gcc)" || true
          ls -la "$(which g++)" || true
          echo "::endgroup::"

      # Windows compiler caching with clcache (built into Nuitka)
      - name: Configure clcache (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "NUITKA_CLCACHE_BINARY=clcache" >> $GITHUB_ENV
          # Set clcache environment variables
          echo "CLCACHE_DIR=${{ runner.temp }}/clcache" >> $GITHUB_ENV
          echo "CLCACHE_COMPRESS=1" >> $GITHUB_ENV
          echo "CLCACHE_COMPRESSLEVEL=6" >> $GITHUB_ENV
          mkdir -p "${{ runner.temp }}/clcache"

      # Cache clcache for Windows
      - name: Cache clcache (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/clcache
          key: clcache-${{ matrix.os }}-${{ matrix.arch }}-${{ hashFiles('src/**/*.py', 'pyproject.toml') }}
          restore-keys: |
            clcache-${{ matrix.os }}-${{ matrix.arch }}-
            clcache-${{ matrix.os }}-

      # Configure Nuitka cache directories
      - name: Configure Nuitka environment
        shell: bash
        run: |
          echo "NUITKA_CACHE_DIR=${{ runner.temp }}/nuitka-cache" >> $GITHUB_ENV
          echo "NUITKA_CACHE_DIR_DOWNLOADS=${{ runner.temp }}/nuitka-cache/downloads" >> $GITHUB_ENV
          echo "NUITKA_CACHE_DIR_CCACHE=${{ runner.temp }}/nuitka-cache/ccache" >> $GITHUB_ENV
          echo "NUITKA_CACHE_DIR_CLCACHE=${{ runner.temp }}/nuitka-cache/clcache" >> $GITHUB_ENV
          echo "NUITKA_CACHE_DIR_BYTECODE=${{ runner.temp }}/nuitka-cache/bytecode" >> $GITHUB_ENV
          echo "NUITKA_CACHE_DIR_DLL_DEPENDENCIES=${{ runner.temp }}/nuitka-cache/dll-dependencies" >> $GITHUB_ENV
          mkdir -p "${{ runner.temp }}/nuitka-cache"

      # Cache Nuitka build directory
      - name: Cache Nuitka build
        uses: actions/cache@v4
        with:
          path: |
            intune_manager.build
            intune_manager.dist
            intune_manager.onefile-build
            ${{ runner.temp }}/nuitka-cache
          key: nuitka-${{ matrix.os }}-${{ matrix.arch }}-${{ github.sha }}
          restore-keys: |
            nuitka-${{ matrix.os }}-${{ matrix.arch }}-
            nuitka-${{ matrix.os }}-

      - name: Install dependencies
        run: uv sync --all-groups

      - name: Get version from pyproject.toml
        id: version
        shell: bash
        run: |
          # For main branch CI builds, use a fixed development version
          VERSION="0.0.0.1"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION (CI build)"

      - name: Build with Nuitka
        shell: bash
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Show compiler cache status before build
          if [ "${{ runner.os }}" != "Windows" ]; then
            echo "::group::Pre-build ccache statistics"
            ccache --show-stats
            echo "::endgroup::"
          fi
          # Run Nuitka build with caching enabled
          uv run nuitka \
            --product-version="$VERSION" \
            --assume-yes-for-downloads \
            src/intune_manager

      - name: Verify build output
        shell: bash
        run: |
          echo "Checking for build output at: ${{ matrix.output_path }}"
          if [ -e "${{ matrix.output_path }}" ]; then
            echo "✓ Build artifact found"
            ls -lh "${{ matrix.output_path }}"
          else
            echo "✗ Build artifact not found!"
            echo "Contents of / directory:"
            ls -larth
            echo "Contents of src directory:"
            ls -larth src/
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: IntuneManager-${{ steps.version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}
          path: ${{ matrix.output_path }}
          retention-days: 90
          compression-level: 9

      - name: Save compiler cache statistics
        if: always()
        shell: bash
        run: |
          if [ "${{ runner.os }}" != "Windows" ]; then
            echo "::group::ccache statistics"
            ccache --show-stats || true
            ccache --show-config || true
            echo "Cache directory: $(ccache --get-config cache_dir)" || true
            echo "Cache size: $(du -sh $(ccache --get-config cache_dir) 2>/dev/null || echo 'N/A')"
            echo "::endgroup::"
          else
            echo "::group::clcache statistics"
            echo "CLCACHE_DIR: $CLCACHE_DIR"
            if [ -d "$CLCACHE_DIR" ]; then
              echo "Cache size: $(du -sh $CLCACHE_DIR 2>/dev/null || echo 'N/A')"
              echo "Number of cached files: $(find $CLCACHE_DIR -type f | wc -l)"
            else
              echo "No clcache directory found"
            fi
            echo "::endgroup::"
          fi
