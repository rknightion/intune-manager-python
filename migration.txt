## Legend
- [ ] TODO ‚Äî not started
- [>] IN PROGRESS ‚Äî actively being worked
- [x] DONE ‚Äî complete
- [!] BLOCKED ‚Äî pending external input

---

## ü§ñ LLM Agent Instructions for Working with This Document

### On Session Start
1. **Always read this file first** to understand current project state
2. **Check "Current Migration Tasks"** section to identify active work
3. **Review most recent `[>] IN PROGRESS` items** to understand what was being worked on
4. **Read blockers marked `[!]`** to avoid redundant attempts at blocked tasks

### During Active Work
1. **Mark tasks `[>]` when starting work** ‚Äî update status immediately when beginning a task
2. **Keep exactly ONE task `[>]` at a time** (unless parallelizable work)
3. **Update task status in real-time** ‚Äî don't batch status updates
4. **Add inline notes** after task descriptions when encountering:
   - Implementation decisions made
   - Blockers or issues discovered
   - File paths or modules created/modified
   - API changes or breaking changes
   Example: `- [x] P6.5.2: Build device table ‚Äî NOTE: Used QTableView with proxy model for filtering; main widget in ui/devices/widgets.py:DeviceTableWidget`
5. **Complete as many sub/child tasks along with the parent at the same time as reasonable especially if they are related
6. **Use the contect of every outstanding task you know about to inform how to implement functionality in the current task (to avoid having to duplicate effort later on)

### Task Completion
1. **Mark `[x]` ONLY when fully complete** ‚Äî if partial, leave as `[>]` with status note
2. **Do NOT mark complete if**:
   - Tests are failing
   - Implementation is partial
   - Errors remain unresolved
   - Dependencies are missing
3. **Move completed task details** to appropriate "What Has Been Completed" phase section for context preservation

### Discovering New Work
0. **Proceed with the order of parent tasks as listed in this document. The numbering may not be sequential it is the order of the parent task that's important in this document**
1. **Add new subtasks freely** when you discover additional work needed
2. **Use hierarchical numbering** (e.g., P6.5.1, P6.5.2, P6.5.2.1) to nest related tasks
3. **Place new tasks in appropriate phase** or create new phase if scope expands
4. **Flag architectural decisions** that may impact other phases
5. **Note if task should be deferred** to later phase with reasoning

### On Session End (CRITICAL)
1. **Update all `[>]` items** with current status or notes
2. **Document any blockers** encountered with `[!]` and explanation
3. **List files modified** in session summary area (if not already in task notes)
4. **Add "What's Ready" notes** if you've completed infrastructure others can build on
5. **Recommend next steps** to help future sessions pick up momentum

### Context7 MCP Usage
When working with Microsoft Graph API:
- **Always check Graph API docs** via Context7 MCP before implementing Graph calls
- Use library ID `microsoftgraph/msgraph-beta-sdk-python` for SDK context
- Use library ID `microsoftgraph/microsoft-graph-docs-contrib` for Graph API reference
- Document API version choices (v1.0 GA vs beta) with reasoning

### Task Expansion Philosophy
- **Do expand tasks** when you discover complexity not originally captured
- **Do add tasks** for quality/testing/documentation as you work
- **Do adjust future phases** if project architecture evolves
- **Don't be constrained** by original task list ‚Äî this is a living document
- **Do preserve intent** of original phases while adapting tactical approach

---

## Current Migration Tasks
**Start at the top and work your way down**

- [ ] P6.12: Make proper use of MS Graph APIs by implementing:
- [ ] P6.12.1: Implement a mechanism that allows us to use both the MS Graph v1.0 GA API (stable) for API calls where the functionality we require is present in 1.0 GA version but allows us to override for specific API calls to the MS Graph Beta API where that functionality we need is only implemented in the Graph BETA API. Effectively allowing the app to make use of both API versions depending on the path called. We should be defaulting to the v1 GA API for stability and only using the beta APIs where we require the functionality. Alternatively if the existing functionality we're utilising is in the majority in the beta API then instead default to the beta API and override for v1 (you decice)
- [ ] P6.12.2: Review all current API calls made by our app to ensure we are using the right version of the MS Graph API (beta or GA depending on functionality required). We should validate our calls and contents and expected returns against the context7 MCP docs for graph API or other MS Graph API documentation and pay special attention to noting if functionality we need is only in the beta version or not



- [ ] P6.9 Build Settings/Configuration views (auth status, tenant config, cache management, theme selection, log export, about dialog) reusing the Phase 3 `SettingsWidget` and extending with cache/log controls plus navigation wiring.
  - Embed existing settings widget inside shell tab, add sub-pages for cache inspection, log export, keyring inspection, theme toggle, and about/license info.
  - Hook cache clear / attachment purge to repositories + `AttachmentCache`, surface telemetry opt-in.
- [ ] P6.9.1 Add data validation layer for Graph responses (schema checks)
- [ ] P6.9.2 Implement cache integrity checks on startup (orphaned records, corrupted data)
- [ ] P6.9.3 Add automatic cache repair or purge on validation failure
- [ ] P6.9.4 Log validation errors for diagnostics
- [ ] P6.9.5 Add user-facing cache health status indicator


- [ ] P6.10 Ensure usability, keyboard shortcuts, light theme throughout (no dark theme).
  - Define cross-platform shortcut map (navigation, refresh, search, actions) and expose to help overlay.
  - Audit tab order, focus cues, and high-contrast palette; bootstrap Qt translation catalog (`.ts`) and wiring for future locale packs.
  - optimise metric counts via repository helpers (`cached_count`) to avoid materialising full datasets during dashboard refresh.


- [ ] P6.10.1 Implement optimistic update pattern in services
- [ ] P6.10.2 Add conflict detection (local changes vs remote changes)
- [ ] P6.10.3 Define conflict resolution strategy (last-write-wins, prompt user, etc.)
- [ ] P6.10.4 Build offline change queue with sync on reconnect
- [ ] P6.10.5 Add UI indicators for pending offline changes




- [x] P6.11.0: Expand editor for target creation/deletion, advanced settings, and batch operation ‚Äî NOTE: Reused AssignmentEditorDialog for desired template editing, added staged group batch creation dialog, and refreshed toolbar flows (ui/assignments/widgets.py, ui/assignments/assignment_editor.py)
- [x] P6.11.1: Design first-run detection (check for empty settings + no token cache) ‚Äî NOTE: Added config.onboarding.detect_first_run with FirstRunStatus, MainWindow shows setup banner when tenant config missing and no token cache (ui/main/window.py, config/onboarding.py)
- [x] P6.11.2: Implement multi-step setup wizard (Welcome ‚Üí Azure Config ‚Üí Permission Grant ‚Üí Test Auth ‚Üí Complete) ‚Äî NOTE: Added PySide6 SetupWizard covering onboarding sequence with dedicated pages (ui/settings/setup_wizard.py, ui/settings/widgets.py)
- [x] P6.11.3: Add Azure app registration instructions with deep links to Azure Portal ‚Äî NOTE: Wizard welcome/configuration pages include rich-text guidance and Azure portal deep links (ui/settings/setup_wizard.py)
- [x] P6.11.4: Implement copy-to-clipboard helpers for redirect URI and scopes ‚Äî NOTE: Configuration page exposes copy actions for redirect URI and recommended scopes (ui/settings/setup_wizard.py)
- [x] P6.11.5: Add interactive permission grant flow with real-time scope validation ‚Äî NOTE: Wizard permission page ties into SettingsController authStatusChanged for live scope status updates (ui/settings/setup_wizard.py, ui/settings/controller.py)
- [x] P6.11.6: Build test connection flow that validates auth + basic Graph query ‚Äî NOTE: Introduced SettingsController.test_graph_connection with Graph probe powering wizard test page (ui/settings/controller.py, ui/settings/setup_wizard.py)
- [x] P6.11.7: Add ability to reset/reconfigure without app reinstall ‚Äî NOTE: Settings UI now offers reset action clearing env, secrets, and token cache (ui/settings/controller.py, ui/settings/widgets.py)




- [ ] P6.8 Build Reports module (audit log viewer, export buttons, filter controls).
  - Table view for audit events with filter toolbar (date range, actor, category) and integration with `ExportService`.
  - Provide quick actions: export CSV/JSON, copy row, link to Azure portal entry.
**P6.8 Reports Module** should expand to:
- [ ] P6.8.1: Implement audit log table with pagination
- [ ] P6.8.2: Add filter toolbar (date range picker, actor search, category dropdown)
- [ ] P6.8.3: Build detail panel with full audit event JSON viewer
- [ ] P6.8.4: Add export buttons (CSV, JSON) with range selection
- [ ] P6.8.5: Implement copy row action for sharing
- [ ] P6.8.6: Add deep link to Azure Portal audit entry
- [ ] P6.8.7: Build compliance dashboard with charts (if Phase 6.3 charts implemented)






## Phase 7 ‚Äì Supporting Features & Polish  ‚ú≥Ô∏è Goal: Match Swift niceties
## Phase 7.0:
- [ ] P7.0.1: Implement cancellation token system for async operations
- [ ] P7.0.2: Add progress tracking protocol (total, completed, failed, current)
- [ ] P7.0.3: Wire cancellation tokens into all long-running service operations
- [ ] P7.0.4: Build reusable progress dialog with cancel button
- [ ] P7.0.5: Integrate progress tracking into bulk operations UI
- [ ] P7.0.6: Add inline error states in list views (retry button, error details)
- [ ] P7.0.7: Implement failed operations log with bulk retry
- [ ] P7.0.8: Add error recovery guidance (e.g., "Missing permission: DeviceManagement.ReadWrite.All")
- [ ] P7.0.9: Build transient error detection with auto-retry UI
- [ ] P7.1 Implement log export workflow (collect structured logs, copy to clipboard or save dialog) and integrate success feedback.
- [ ] P7.2 Add clipboard utilities (permission list copy, device info copy) using Qt clipboard APIs.
- [ ] P7.3 Implement notifications/haptics alternatives (system notifications, subtle animations) respecting platform conventions.
- [ ] P7.4 Add cache management UI (clear local data, refresh triggers) with confirmation prompts.
- [ ] P7.5 Review performance for large tenants (list virtualization, incremental loading, cancellation support).

Swift has `AssignmentImportService.swift` for CSV-based bulk assignment import.

**Old Swift Implementation**:
- CSV parser with validation (required columns: AppName, GroupName, Intent)
- Platform compatibility checking before import
- Dry-run mode with warnings
- Progress tracking for large imports
- Error reporting per row with line numbers
- [ ] P7.6.1: Implement CSV parser for assignment import (columns: AppName, GroupName, Intent, Settings)
- [ ] P7.6.2: Add import preview with validation warnings (missing apps/groups, platform conflicts)
- [ ] P7.6.3: Implement dry-run mode showing changes before execution
- [ ] P7.6.4: Add progress reporting for batch imports
- [ ] P7.6.5: Build error log with row-level failures for user review

**P7.7 UI Polish & Enhancements**:
- [ ] P7.7.1: Expand assignment editor per-target scheduling windows and richer settings validation
- [ ] P7.7.2: Add lazy loading/streaming for install summaries to avoid redundant Graph calls
- [ ] P7.7.3: Integrate command palette actions for bulk workflows and assignment exports
- [ ] P7.7.4: Add inline compliance badges and custom delegates for richer device table cells
- [ ] P7.7.5: Extend device detail pane with timeline/history once telemetry events arrive
- [ ] P7.7.6: Introduce advanced device filtering (enrollment source, threat state)
- [ ] P7.7.7: Extend groups hierarchy view to show real nested memberships from Graph member-of data
- [ ] P7.7.8: Integrate drag-drop between group tree and assignment editors
- [ ] P7.7.9: Surface cached owner/member freshness indicators with manual "refresh page" control
- [ ] P7.7.10: Wire quick actions in dashboard for launching module-specific dialogs
- [ ] P7.7.11: Extend assignment preview with side-by-side payload difference visualization

**P7.8 Telemetry & Analytics Integration**:
- [ ] P7.8.1: Feed bulk assignment activity into telemetry for dashboard analytics
- [ ] P7.8.2: Add Graph telemetry, diagnostics, and perf counters for paginated membership fetches
- [ ] P7.8.3: Integrate telemetry for lazy loading/export flows with dashboard performance diagnostics
- [ ] P7.8.4: Wire telemetry hooks for command palette and dashboard to surface assignment activity


## Phase 8 ‚Äì Quality Assurance & Automation  ‚ú≥Ô∏è Goal: Confidence in regressions
- [ ] P8.1 Write unit tests for services, data models, auth flows using pytest + pytest-asyncio + respx/httpx mocking.
- [ ] P8.1.1: Auth tests (token acquisition, refresh, expiry, multi-tenant)
- [ ] P8.1.2: Rate limiter tests (window tracking, backoff calculation, batch splitting)
- [ ] P8.1.3: Service tests (fetch, cache, events, error handling) using respx mocks
- [ ] P8.1.4: Repository tests (CRUD, TTL expiry, cache invalidation)
- [ ] P8.1.5: Model tests (serialization, Graph alias mapping, validation)
- [ ] P8.1.6: Assignment diff tests (complex scenarios: conflicts, platform mismatches)
- [ ] P8.2 Add UI tests with pytest-qt or squish-style smoke tests for critical workflows (login, device fetch, assignment edit).
- [ ] P8.2.1: Auth ‚Üí Graph ‚Üí Service ‚Üí Repository ‚Üí Cache round-trip
- [ ] P8.2.2: Bulk assignment workflow with retry/rollback
- [ ] P8.2.3: Sync service multi-phase refresh with progress tracking
- [ ] P8.2.4: Offline mode with cache fallback
- [ ] P8.2.5: Conflict resolution (local changes vs remote changes)
- [ ] P8.3 Configure continuous integration (GitHub Actions) running uv install, lint, type-check, tests on macOS/Windows/Linux runners.
- [ ] P8.3.1: MainWindow launch and navigation (pytest-qt)
- [ ] P8.3.2: Settings dialog auth flow (mock MSAL)
- [ ] P8.3.3: Dashboard refresh and metric updates
- [ ] P8.3.4: Device list load and filter
- [ ] P8.4.1: Load test with 10K devices (table virtualization)
- [ ] P8.4.2: Memory profiling with large cache (5K devices, 2K apps)
- [ ] P8.4.3: Batch operation performance (1000 assignments)
- [ ] P8.4.4: Cache query performance (SQLite indexes)
- [ ] P8.3.5: Assignment wizard full workflow
- [ ] P8.3.6: Toast dismissal and overlay focus blocking (shared components)
- [ ] P8.3.7: Wizard flow coverage (source select ‚Üí preview ‚Üí apply)
- [ ] P8.4 Add static analysis gates (ruff + mypy) and maintain coverage thresholds.
- [ ] P8.5 Implement test doubles or mock server for Graph API to enable offline development.
- [ ] P8.5.1: Token storage security audit (keyring encryption)
- [ ] P8.5.2: Secure deletion of credentials on logout
- [ ] P8.5.3: Input validation (SQL injection in search, XSS in logs)
- [ ] P8.5.4: Permission boundary tests (403 handling)

- [ ] P8.7.1: Implement global exception handler with crash log capture
- [ ] P8.7.2: Add diagnostic bundle generation (logs, cache stats, config, system info)
- [ ] P8.7.3: Build "Report a Problem" UI with automatic bundle creation
- [ ] P8.7.4: Add crash recovery flow (safe mode, cache purge option)

## Phase 9 ‚Äì Packaging & Deployment  ‚ú≥Ô∏è Goal: Deliverable installers per platform
- [ ] P9.1 Evaluate packaging toolchain compatibility with uv (e.g., `uvx pyinstaller`, `briefcase`, `nuitka`) and choose approach per OS.
- [ ] P9.2 Automate build scripts for macOS (.app + dmg), Windows (.exe/msi), Linux (AppImage/Flatpak) ensuring MSAL redirect support.
- [ ] P9.3 Code-signing strategy (macOS notarization, Windows signing) and integration with CI secrets.
- [ ] P9.4 Implement in-app update check or release notifications aligned with distribution choice.
- [ ] P9.5 Produce deployment verification checklist (auth test, Graph call, log export, cache, assignments).

## Phase 10 ‚Äì Documentation & Knowledge Transfer  ‚ú≥Ô∏è Goal: Sustainable hand-off
- [ ] P10.1 Maintain developer docs (architecture overview, module guides, setup instructions) alongside code.
- [ ] P10.2 Draft user-facing guide highlighting new cross-platform capabilities and any workflow adjustments.
- [ ] P10.3 Record migration decisions, trade-offs, and outstanding Swift-only behaviors in CHANGELOG / ADRs.
- [ ] P10.4 Plan incremental release milestones (alpha/beta) with feedback loops from existing macOS users.
- [ ] P10.5 Final review with stakeholders; update this migration log with closure notes.

## Risks & Considerations
- MSAL platform differences (embedded web view vs system browser) may impact UX; evaluate early.
- Graph API throttling at scale ‚Äî ensure batching + retry logic is robust before enabling bulk operations.
- This is a new application and backwards compatability is not required or desired. Do not add additional code to try and maintain backwards compatability.
- Packaging tool compatibility with uv-managed environments; may require custom build hooks.
- Accessibility + High DPI support on Windows/Linux needs targeted testing.
- Azure AD permission consent flows differ per tenant; provide guidance and diagnostics in-app.
