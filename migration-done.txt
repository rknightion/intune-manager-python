# IntuneManager Migration Plan (Swift ➜ Python + PySide6)
Date: 2025-02-14  
Maintainer: Codex migration log  
Python Baseline: 3.13 (managed with `uv`)  
Primary Tooling: PySide6, msal, msgraph-beta-sdk-python, httpx, SQLModel + SQLite, pydantic, ruff, pytest, mypy, uvx/pyinstaller (to be validated)

---
Instructions: Update tasks with `[>]` / `[x]` as work progresses. Append new phases/tasks as requirements evolve. Keep concise notes per item (e.g., outcome, blockers) to retain context across sessions. Mark a task `[x]` only after `uv run intune-manager` launches cleanly; use a ~5s timeout to terminate the GUI if needed and resolve any startup issues before completion.
Any tasks not completed in a step must be marked as such. If it would be more appropriate to do that task in a future step then please update the future step (our future tasks are not immutable and can be adapted and adjusted as the projects architecture evolves)
For any interactions with the Microsoft Graph API you should utilise context7 MCP to ensure the right API calls are made. Use library ID microsoftgraph/msgraph-beta-sdk-python for context relating to the python SDK and library ID microsoftgraph/microsoft-graph-docs-contrib for all context relating to the MS Graph API and the relevant calls to make and expected responses.

## What Has Been Completed

### [x] DONE  PHASE 0: Assessment & Planning
- Analyzed Swift app architecture (95 files, ~36K LOC, SwiftUI + SwiftData)
- Catalogued Graph API endpoints (devices, apps, groups, assignments, configs, audit)
- Identified platform dependencies (Keychain → keyring, SwiftData → SQLModel, AppKit → PySide6)
- Defined cross-platform targets (macOS/Windows/Linux with code signing requirements)
- Set success metrics (feature parity, auth reliability ≥99%, tenant sync <90s for 5K devices)

### [x] DONE  PHASE 1: Python Project Bootstrapping
- Initialized with `uv` (Python 3.13, package-based project structure)
- Configured all dependencies: PySide6, msal, msgraph-beta-sdk, httpx, pydantic, sqlmodel, structlog/loguru, pytest, ruff, mypy
- Set up dev scripts: `uv run intune-manager-{lint,fmt,typecheck,tests,app}`
- Created layered package structure: `auth/`, `services/`, `data/`, `ui/`, `config/`, `utils/`, `graph/`, `cli/`
- Added README, CONTRIBUTING, AGENTS guides

### [x] DONE  PHASE 2: Core Infrastructure
**Configuration** (`config.settings`):
- `SettingsManager`: Loads from env vars + dotenv file, persists to platformdirs config directory
- `Settings` dataclass: tenant_id, client_id, redirect_uri, authority, graph_scopes, cache paths
- Default Graph scopes include all required Intune permissions

**Logging** (`utils.logging`):
- structlog + loguru pipeline with rotating file handler (`~/.cache/IntuneManager/logs/`)
- Console + file sinks, JSON-structured logs, context binding
- `log_file_path()` export helper for UI

**Async/Qt Bridge** (`utils.asyncio`):
- `qasync` integration for asyncio + Qt event loop
- `AsyncBridge` class: `run_async(coro)` with `task_completed` signal
- Interval scheduling, delayed callbacks

**Rate Limiting** (`graph.rate_limiter`):
- `RateLimiter` ported from Swift: 20-second window tracking
- Limits: 100 writes/window, 1000 total requests/window
- Exponential backoff with jitter (1s → 32s max), batch splitting logic

**Error Handling** (`graph.errors`):
- Categorized exceptions: `GraphAPIError`, `AuthenticationError`, `PermissionError`, `RateLimitError`
- Recovery metadata (retry hints, required scopes)
- Graph response code → exception translation

**Graph Client Factory** (`graph.client`):
- Wraps `msgraph-beta-sdk-python` with callback credential provider
- `RateLimitedAsyncClient`: Custom httpx adapter with rate limiter integration
- Methods: `request_json()`, `request_bytes()`, `iter_collection()` (auto-pagination)
- Beta endpoint support via api_version parameter

### [x] DONE  PHASE 3: Authentication & Permissions
**AuthManager** (`auth.auth_manager`):
- MSAL `PublicClientApplication` wrapper with async interfaces
- Token cache serialization to `~/.cache/IntuneManager/token_cache.bin`
- Methods: `acquire_token()`, `sign_in_interactive()`, `sign_out()`, silent refresh
- Multi-tenant support, current user tracking

**PermissionChecker** (`auth.permission_checker`):
- JWT payload decoding to extract granted scopes
- Compares against required Graph permissions, reports missing scopes

**SecretStore** (`auth.secret_store`):
- Cross-platform secure storage using `keyring` library
- macOS Keychain / Windows Credential Manager / Linux SecretService integration

**Settings UI** (`ui.settings`):
- `SettingsWidget`: Tenant/client config, scope editor, keyring-backed client secret
- Interactive sign-in, permission diagnostics, missing scope list
- `SettingsController`: Qt signals for async operations (auth, save, load)

### [x] DONE  PHASE 4: Data Models & Persistence
**Pydantic Domain Models** (`data.models.*`):
- `ManagedDevice`: Compliance/management states, hardware/network info, user details
- `MobileApp`: Display name, publisher, platform, assignments, publishing state
- `DirectoryGroup`: ID, name, security/mail flags
- `MobileAppAssignment`: Target groups, intent (Available/Required/Uninstall), settings
- `AssignmentFilter`, `ConfigurationProfile`, `AuditEvent`
- All use Graph API alias mapping via `Field(alias="...")`

**SQLModel Persistence** (`data.sql.*`):
- 9 tables: `DeviceRecord`, `MobileAppRecord`, `GroupRecord`, `MobileAppAssignmentRecord`, `ConfigurationProfileRecord`, `AuditEventRecord`, `AssignmentFilterRecord`, `CacheEntry`, `SchemaVersion`
- Tenant-scoped caching, JSON payload denormalization
- `DatabaseManager`: Schema versioning (SCHEMA_VERSION=1), engine creation
- Mappers: Graph pydantic ↔ SQLModel record conversion

**Repositories** (`data.repositories.*`):
- `BaseCacheRepository<DomainT, RecordT>`: Generic cache-aware base with TTL tracking
- Concrete repos: Devices (15min TTL), Apps (20min), Groups (30min), Configs (30min), Filters (60min), Audit (15min)
- Methods: `list_cached()`, `replace_all()`, `count_cached()`, `is_cache_stale()`, `clear()`
- Assignment join management in `MobileAppRepository`

**Attachment Storage** (`data.storage.attachments`):
- `AttachmentCache`: Hashed file storage under `~/.cache/IntuneManager/attachments/`
- Tenant scoping, quota enforcement, TTL-based purging
- Metadata tracking (`AttachmentMetadata`), capacity logging

### [x] DONE  PHASE 5: Graph Services & Business Logic
**Graph Request Builders** (`graph.requests`):
- Typed `GraphRequest` dataclass (method, url, headers, body, params, api_version)
- Device actions: sync, retire, wipe, rebootNow, shutDown
- Mobile apps: assignments CRUD, icon download, install summary
- Batch operations: `build_batch_requests()`, `GraphBatch` container
- Configuration & audit query builders

**Service Layer** (`services.*`):
All services follow pattern:
```python
class *Service:
    refreshed: EventHook[RefreshEvent[List[Model]]]
    errors: EventHook[ServiceErrorEvent]

    def list_cached(tenant_id) -> List[Model]
    def is_cache_stale(tenant_id) -> bool
    def count_cached(tenant_id) -> int
    async def refresh(tenant_id, force=False) -> List[Model]
```

Implementations:
- **DeviceService**: Fetch devices with optional `$expand=detectedApps`, device actions (sync/wipe/retire/reboot/shutdown)
- **ApplicationService**: Fetch apps with assignments/categories, icon caching, install summaries
- **GroupService**: Fetch groups with membership counts, group membership events
- **AssignmentService**: Diff/apply workflows, assignment backup/restore (JSON), conflict detection
- **AssignmentFilterService**: Filter metadata caching
- **ConfigurationService**: Device configurations from multiple endpoints
- **AuditLogService**: Audit events with `$filter` support
- **ExportService**: CSV/JSON export for devices, apps, audit logs
- **SyncService**: Multi-phase refresh orchestration, progress events
- **MobileConfigService**: Stub only (deferred)

**Beta Endpoint Coverage**:
- Device actions, mobile app assignments, install summaries, assignment filters, config templates require beta
- Documented GA-compatible alternatives where available

### [x] DONE  PHASE 6.3-6.7: Core UI Modules
**Dashboard** (`ui.dashboard`):
- `DashboardWidget` with resource metrics, cache staleness, sync-triggered refresh
- QtCharts visualizations (device compliance pie, assignment intent bar)
- Banner integration for auth/config warnings, tenant/auth status cards
- Command palette action for tenant refresh

**Devices Module** (`ui.devices`):
- `DevicesWidget` with table, proxy models, search text, platform/compliance filters
- Selection-aware action toolbar wired to `DeviceService` events
- Detail pane with tabbed layout (Overview, Hardware, Network, Security, Installed Apps)
- Batch selection with multi-device actions, context menu, CSV export
- LRU cache for instant detail drawer display
- Lazy loading with chunked append for >1k rows

**Applications Module** (`ui.applications`):
- Icon-decorated grid with platform/intent filters
- Tabbed detail pane with compliance/assignment badges
- Assignment editor with target add/remove, JSON settings editing, install summary drill-down
- Fuzzy matching search (SequenceMatcher + tokenized contains)
- Bulk assignment wizard across multi-select

**Groups Module** (`ui.groups`):
- Dual table/hierarchy tabs with type badges, synced selection
- Async member streams with cached pagination, prev/next controls
- Group detail panel with ownership lists, dynamic membership rule editor
- Add/remove member UI with validation
- Assignment export support

**Assignments Center** (`ui.assignments`):
- Source/target selection with staged group awareness
- Diff summaries, backup/restore, history timeline with warnings
- Bulk wizard flow: app selection → group scoping → conflict resolution → preview → apply
- Cancellable progress dialog with retry-on-conflict
- Per-update keep/apply toggles in conflict resolver

## Current Architecture

**Technology Stack**:
- **UI**: PySide6 (Qt 6.10+)
- **Auth**: MSAL Python SDK with keyring for secrets
- **Graph API**: msgraph-beta-sdk-python
- **Async**: asyncio + qasync for Qt integration
- **Data**: Pydantic models + SQLModel (SQLAlchemy 2.0) + SQLite
- **Logging**: structlog + loguru with rotating files
- **Dev Tools**: ruff (lint/format), mypy (type-check), pytest

**Package Structure**:
```
src/intune_manager/
├── __init__.py              # App entry (main() function)
├── auth/                    # MSAL, permissions, secrets, token cache
├── config/                  # Settings management, env/file persistence
├── graph/                   # Graph client, requests, rate limiting, errors
├── data/
│   ├── models/             # Pydantic domain models (Graph entities)
│   ├── sql/                # SQLModel tables, engine, mappers
│   ├── repositories/       # Cache-aware data access layer
│   └── storage/            # Attachment cache (icons, logs)
├── services/               # Business logic (devices, apps, groups, assignments, etc.)
├── ui/
│   ├── main/              # MainWindow shell
│   ├── components/        # Shared widgets (theme, alerts, toasts, overlays, dialogs)
│   ├── dashboard/         # Dashboard view (metrics, status, warnings)
│   └── settings/          # Settings dialog (auth, config, scopes)
└── utils/                  # Logging, async bridge, background tasks
```

**Key Architectural Decisions**:
1. **msgraph-beta-sdk** over v1.0 for Intune endpoint coverage
2. **SQLModel** to combine Pydantic validation with SQL persistence
3. **EventHook** pattern (not Qt signals) in services for UI decoupling
4. **AsyncBridge** to bridge asyncio coroutines to Qt event loop
5. **RateLimiter** centralized in Graph client for 20-second window tracking
6. **BaseCacheRepository** generic for DRY cache/TTL management
7. **keyring** for cross-platform secure credential storage

## What's Ready for Next Phases

**Working Infrastructure**:
- [x] DONE  Complete auth flow (login, token refresh, permission checking)
- [x] DONE  All Graph service implementations with caching
- [x] DONE  Database persistence with schema versioning
- [x] DONE  MainWindow shell with navigation, status bar, theme manager
- [x] DONE  Dashboard with metrics, warnings, sync trigger
- [x] DONE  Settings UI with auth integration
- [x] DONE  Shared components (alerts, toasts, overlays, command palette)

**What Services Can Do** (Backend Ready):
- Device listing, detail fetch, actions (sync/wipe/retire/reboot/shutdown)
- App listing with assignments, icon caching, install summaries
- Group listing with membership
- Assignment diff, apply, backup/restore
- Configuration profile listing
- Audit log fetching with filters
- CSV/JSON export
- Multi-service sync orchestration


- [x] P6.12: Make proper use of MS Graph APIs by implementing: — NOTE: Completed dual-version routing and endpoint audit; parent closes with P6.12.1-2 done this session.
- [x] P6.12.1: Implement a mechanism that allows us to use both the MS Graph v1.0 GA API (stable) for API calls where the functionality we require is present in 1.0 GA version but allows us to override for specific API calls to the MS Graph Beta API where that functionality we need is only implemented in the Graph BETA API. Effectively allowing the app to make use of both API versions depending on the path called. We should be defaulting to the v1 GA API for stability and only using the beta APIs where we require the functionality. Alternatively if the existing functionality we're utilising is in the majority in the beta API then instead default to the beta API and override for v1 (you decice) — NOTE: Added GraphAPIVersion resolver with per-path overrides, batch safeguards, and public helpers (src/intune_manager/graph/client.py, src/intune_manager/graph/__init__.py).
- [x] P6.12.2: Review all current API calls made by our app to ensure we are using the right version of the MS Graph API (beta or GA depending on functionality required). We should validate our calls and contents and expected returns against the context7 MCP docs for graph API or other MS Graph API documentation and pay special attention to noting if functionality we need is only in the beta version or not — NOTE: Audited Intune endpoints against MS Graph docs; defaulted to GA with targeted beta on assignment filters, configuration policies, audit events, mobile app assign/icon/installSummary (src/intune_manager/graph/requests.py, services/audit.py, services/configurations.py, services/filters.py). References: intune-devices-manageddevice-get (v1.0), intune-apps-mobileappassignment-list (v1.0), intune-policyset-assignmentfilteroperator (beta), intune-deviceconfigv2-devicemanagementconfigurationsetting-create (beta), intune-apps-mobileappinstallsummary-get (beta).

- [x] P6.9 Build Settings/Configuration views (auth status, tenant config, cache management, theme selection, log export, about dialog) reusing the Phase 3 `SettingsWidget` and extending with cache/log controls plus navigation wiring. — NOTE: Added tabbed SettingsPage with cache diagnostics, log export, telemetry opt-in, appearance/about panels (ui/settings/page.py, ui/main/window.py, services/diagnostics.py).
  - Embed existing settings widget inside shell tab, add sub-pages for cache inspection, log export, keyring inspection, theme toggle, and about/license info.
  - Hook cache clear / attachment purge to repositories + `AttachmentCache`, surface telemetry opt-in.
- [x] P6.9.1 Add data validation layer for Graph responses (schema checks) — NOTE: Introduced `GraphResponseValidator` (data/validation.py) and wired through device/app/group/config/audit/filter services to skip+log invalid payloads.
- [x] P6.9.2 Implement cache integrity checks on startup (orphaned records, corrupted data) — NOTE: Added `CacheIntegrityChecker` (data/cache_health.py) and run during bootstrap (bootstrap.py) before UI loads.
- [x] P6.9.3 Add automatic cache repair or purge on validation failure — NOTE: Cache inspection now removes invalid rows + normalises metadata (data/cache_health.py, services/diagnostics.py).
- [x] P6.9.4 Log validation errors for diagnostics — NOTE: Validation issues emit structured warnings and telemetry via GraphResponseValidator callbacks (data/validation.py, services/*).
- [x] P6.9.5 Add user-facing cache health status indicator — NOTE: Settings cache tab shows severity badge + table and integrates with diagnostics service (ui/settings/page.py).

- [x] P6.11.0: Expand editor for target creation/deletion, advanced settings, and batch operation — NOTE: Reused AssignmentEditorDialog for desired template editing, added staged group batch creation dialog, and refreshed toolbar flows (ui/assignments/widgets.py, ui/assignments/assignment_editor.py)
- [x] P6.11.1: Design first-run detection (check for empty settings + no token cache) — NOTE: Added config.onboarding.detect_first_run with FirstRunStatus, MainWindow shows setup banner when tenant config missing and no token cache (ui/main/window.py, config/onboarding.py)
- [x] P6.11.2: Implement multi-step setup wizard (Welcome → Azure Config → Permission Grant → Test Auth → Complete) — NOTE: Added PySide6 SetupWizard covering onboarding sequence with dedicated pages (ui/settings/setup_wizard.py, ui/settings/widgets.py)
- [x] P6.11.3: Add Azure app registration instructions with deep links to Azure Portal — NOTE: Wizard welcome/configuration pages include rich-text guidance and Azure portal deep links (ui/settings/setup_wizard.py)
- [x] P6.11.4: Implement copy-to-clipboard helpers for redirect URI and scopes — NOTE: Configuration page exposes copy actions for redirect URI and recommended scopes (ui/settings/setup_wizard.py)
- [x] P6.11.5: Add interactive permission grant flow with real-time scope validation — NOTE: Wizard permission page ties into SettingsController authStatusChanged for live scope status updates (ui/settings/setup_wizard.py, ui/settings/controller.py)
- [x] P6.11.6: Build test connection flow that validates auth + basic Graph query — NOTE: Introduced SettingsController.test_graph_connection with Graph probe powering wizard test page (ui/settings/controller.py, ui/settings/setup_wizard.py)
- [x] P6.11.7: Add ability to reset/reconfigure without app reinstall — NOTE: Settings UI now offers reset action clearing env, secrets, and token cache (ui/settings/controller.py, ui/settings/widgets.py)







NOT DONE INTENTIONALLY EXCLUDED (for now!):
 [ ] P6.8 Build Reports module (audit log viewer, export buttons, filter controls).
  - Table view for audit events with filter toolbar (date range, actor, category) and integration with `ExportService`.
  - Provide quick actions: export CSV/JSON, copy row, link to Azure portal entry.
**P6.8 Reports Module** should expand to:
- [ ] P6.8.1: Implement audit log table with pagination
- [ ] P6.8.2: Add filter toolbar (date range picker, actor search, category dropdown)
- [ ] P6.8.3: Build detail panel with full audit event JSON viewer
- [ ] P6.8.4: Add export buttons (CSV, JSON) with range selection
- [ ] P6.8.5: Implement copy row action for sharing
- [ ] P6.8.6: Add deep link to Azure Portal audit entry
- [ ] P6.8.7: Build compliance dashboard with charts (if Phase 6.3 charts implemented)


- [x] P6.10.0 Ensure usability, keyboard shortcuts, light theme throughout (no dark theme). — NOTE: Added centralized shortcut map + overlay (src/intune_manager/ui/main/window.py, ui/components/shortcuts.py), enforced light-only theme with focus styling and removed toggles (ui/components/theme.py, ui/settings/page.py, ui/main/window.py), bootstrapped Qt translation manager + cached count optimisations for dashboard metrics (intune_manager/__init__.py, ui/i18n/manager.py, data/repositories/base.py, services/*/count_cached).
  - Define cross-platform shortcut map (navigation, refresh, search, actions) and expose to help overlay.
  - Audit tab order, focus cues, and high-contrast palette
  - optimise metric counts via repository helpers (`cached_count`) to avoid materialising full datasets during dashboard refresh.


- [x] P6.10.1 Implement optimistic update pattern in services — NOTE: Added `MutationStatus` lifecycle helper + `run_optimistic_mutation`, updated group/config/assignment services to emit pending/success/failure events, refreshed UI handling, and covered helper behaviour with new tests (`tests/services/test_base.py`).
- [x] P6.10.2 Ensure correct error handling on graph API updates so the user is presented with the full error message as well as the attempted CLI for easier debugging if not already implemented — NOTE: Enriched `GraphAPIError` with request context + CLI reproduction command, updated `GraphClientFactory` to attach details, and UI now surfaces expanded error text.

- [x] P7.6.1: Implement CSV parser for assignment import (columns: AppName, GroupName, Intent, Settings) — NOTE: 2025-10-23 Added `AssignmentImportService.parse_csv` with per-row validation + progress callbacks (`services/assignment_import.py`), wired through controller/UI with new CSV import toolbar flow (`ui/assignments/widgets.py`, `ui/assignments/import_dialog.py`).
- [x] P7.6.2: Add import preview with validation warnings (missing apps/groups, platform conflicts) — NOTE: 2025-10-23 Added `AssignmentImportDialog` preview with row status + warning summaries and platform hints, integrated into CSV import flow.
- [x] P7.6.3: Implement dry-run mode showing changes before execution — NOTE: 2025-10-23 CSV import now stages desired assignments and automatically triggers dry-run diff preview when targets selected (reuses existing diff engine).
- [x] P7.6.4: Add progress reporting for batch imports — NOTE: 2025-10-23 Import service emits `ImportProgress` per row, UI shows cancellable `QProgressDialog` during CSV parsing.
- [x] P7.6.5: Build error log with row-level failures for user review — NOTE: 2025-10-23 Preview dialog aggregates row warnings/errors with copy/save log tooling (`ui/assignments/import_dialog.py`).

**P7.7 UI Polish & Enhancements**:
- [x] P7.7.1: Expand assignment editor per-target scheduling windows and richer settings validation — NOTE: 2025-10-23 Added scheduling UI + validation to assignment editor (`ui/assignments/assignment_editor.py`) with new fields on `AssignmentSettings` (`data/models/assignment.py`).
- [x] P7.7.2: Add lazy loading/streaming for install summaries to avoid redundant Graph calls — NOTE: 2025-10-23 Added service-level caching with TTL + UI cache reuse/Shift-force refresh (`services/applications.py`, `ui/applications/widgets.py`, controller pass-through).

## Phase 7.0:
- [x] P7.0.1: Implement cancellation token system for async operations — NOTE: Added utils/cancellation with CancellationToken/Source + CancellationError
- [x] P7.0.2: Add progress tracking protocol (total, completed, failed, current) — NOTE: Created utils/progress with ProgressUpdate/Tracker; assignment import now emits structured updates
- [x] P7.0.4: Build reusable progress dialog with cancel button — NOTE: Added ui/components/progress.ProgressDialog (token-aware)

- [x] P7.0.1: Implement cancellation token system for async operations — NOTE: Added utils/cancellation with CancellationToken/Source + CancellationError
- [x] P7.0.2: Add progress tracking protocol (total, completed, failed, current) — NOTE: Introduced utils/progress ProgressUpdate/Tracker and refactored services to emit structured updates
- [x] P7.0.3: Wire cancellation tokens into all long-running service operations — NOTE: Extended cancellation support across Graph client, repositories, services, and controllers (devices/apps/groups/filters/configs/audit/sync/import)
- [x] P7.0.4: Build reusable progress dialog with cancel button — NOTE: Added ui/components/progress.ProgressDialog and token-aware helpers
- [x] P7.0.5: Integrate progress tracking into bulk operations UI — NOTE: Shared progress dialog + cancellation for assignment import, device/group refresh, and dashboard sync flows